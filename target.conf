[header] errno.h. 
[func/]
void perror (const char *message) <stub>
char * strerror (int errnum) <stub>
char * strerror_r (int errnum, char *buf, size_t n) <stub>
void error (int status, int errnum, const char *format, ...) <stub>
void exit(int status) <stub>
[/func]

## stub function

[header] sys/mman.h. 
[func/]
void * mmap (void *address, size_t length, int protect, int flags, int filedes, off_t offset) <f:-1>
void * mmap64 (void *address, size_t length, int protect, int flags, int filedes, off64_t offset) <f:-1>
[/func]

[header] sys/types.h
[header] sys/socket.h
[func/]
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen) <f:-1>
int accept4(int sockfd, struct sockaddr *addr, socklen_t *addrlen, int flags) <f:-1>
[/func]

[header] unistd.h
[func/]
int access(const char *pathname, int mode) <f:-1>
int acct(const char *filename) <f:-1>
[/func]


[header] keyutils.h
[func/]
key_serial_t add_key(const char *type, const char *description, const void *payload, size_t plen, key_serial_t keyring) <f:-1>
[/func]

[header] sys/timex.h
[func/]
int adjtimex(struct timex *buf) <f:-1>
[/func]

[header] fcntl.h
[func/]
int posix_fadvise(int fd, off_t offset, off_t len, int advice) <f:-1>
int sync_file_range(int fd, off64_t offset, off64_t nbytes, unsigned int flags) <f:-1>
[/func]

[header] sys/types.h
[header] sys/socket.h
[func/]
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen) <f:-1>
[/func]

[header] unistd.h
[func/]
int brk(void *addr) <f:-1>
void *sbrk(intptr_t increment) <f:-1>
[/func]

[header] sys/capability.h
[func/]
int capget(cap_user_header_t hdrp, cap_user_data_t datap) <f:-1>
int capset(cap_user_header_t hdrp, const cap_user_data_t datap) <f:-1>
[/func]

[h] unistd.h
[func/]
int chdir(const char *path) <f:-1>
int fchdir(int fd) <f:-1>
[/func]

[h] sys/stat.h
[func/]
int chmod(const char *path, mode_t mode) <f:-1>
int fchmod(int fd, mode_t mode) <f:-1>
[/fun]

[h] unistd.h
[func/]
int chown(const char *path, uid_t owner, gid_t group)
int fchown(int fd, uid_t owner, gid_t group)
int lchown(const char *path, uid_t owner, gid_t group)
int chroot(const char *path)
[/func]

[h] time.h
[func/]
int clock_getres(clockid_t clk_id, struct timespec *res)
int clock_gettime(clockid_t clk_id, struct timespec *tp)
int clock_settime(clockid_t clk_id, const struct timespec *tp)
int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *request, struct timespec *remain)
[/fun]

#[h] sched.h
#[func/] #TODO
#int clone(int (*fn)(void *), void *child_stack, int flags, void *arg, ... /* pid_t *ptid, struct user_desc *tls, pid_t *ctid */ )
#[/func]

[h] unistd.h
[func/]
int close(int fd)
[/func]

[h] sys/types.h
[h] sys/socket.h
[func]
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen)
[/func]

[h] sys/types.h
[h] sys/stat.h
[h] fcntl.h
[func/]
#int open(const char *pathname, int flagas, ...) <stub> #TODO
int creat(const char *pathname, mode_t mode)
[/func]

[h] unistd.h
[func/]
int dup(int oldfd)
int dup2(int oldfd, int newfd)
int dup3(int oldfd, int newfd, int flags)
[/func]

[h] sys/epoll.h
[func/]
int epoll_create(int size)
int epoll_create1(int flags)
int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)
int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)
int epoll_pwait(int epfd, struct epoll_event *events, int maxevents, int timeout, const sigset_t *sigmask)
[/func]

[func]
int eventfd(unsigned int initval, int flags)
[/func]

[func/]
#int execve(const char *filename, char *const argv[], char *const envp[]) #TODO
int faccessat(int dirfd, const char *pathname, int mode, int flags)
int fallocate(int fd, int mode, off_t offset, off_t len)
int fchmodat(int dirfd, const char *pathname, mode_t mode, int flags)
#int fcntl(int fd, int cmd, ... /* arg */ ) #TODO
int fsync(int fd)
int fdatasync(int fd)
[/func]

/* [h] attr/xattr.h */
[h] sys/types.h
[func/]
ssize_t getxattr(const char *path, const char *name, void *value, size_t size)
ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size)
ssize_t fgetxattr(int fd, const char *name, void *value, size_t size)
[/func]

[func/]
int stat(const char *path, struct stat *buf)
int fstat(int fd, struct stat *buf)
int lstat(const char *path, struct stat *buf)
int fstatat(int dirfd, const char *pathname, struct stat *buf, int flags)
[/funv]

[h] sys/vfs.h
[func/]
int statfs(const char *path, struct statfs *buf)
int fstatfs(int fd, struct statfs *buf)
[/func]

[h] sys/statvfs.h
[func/]
int statvfs(const char *path, struct statvfs *buf)
int fstatvfs(int fd, struct statvfs *buf)
[/func]

[func/]
int truncate(const char *path, off_t length)
int ftruncate(int fd, off_t length)
[/func]

[h] linux/futex.h
[h] sys/time.h
[func/]
int futex(int *uaddr, int op, int val, const struct timespec *timeout, int *uaddr2, int val3)
#int futimesat(int dirfd, const char *pathname, const struct timeval times[2]) #TODO
[/func]

[func/]
char *getcwd(char *buf, size_t size)
char *getwd(char *buf)
char *get_current_dir_name(void)
int getdomainname(char *name, size_t len)
int setdomainname(const char *name, size_t len)
int getdtablesize(void)
#int getgroups(int size, gid_t list[]) #TODO
[/func]

[h] grp.h
[func/]
int setgroups(size_t size, const gid_t *list)
[/func]

[func/]
long gethostid(void)
int sethostid(long hostid)
int gethostname(char *name, size_t len)
int sethostname(const char *name, size_t len)
int getitimer(int which, struct itimerval *curr_value)
int setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value)
[/func]

/* [h] numaif.h */
[func/]
int get_mempolicy(int *mode, unsigned long *nodemask, unsigned long maxnode, unsigned long addr, unsigned long flags)
[/func]

[func/]
int getpagesize(void)
[/func]

[h] sys/socket.h
[func/]
int getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen)
[/func]

[func/]
int setpgid(pid_t pid, pid_t pgid)
pid_t getpgid(pid_t pid)
#int setpgrp(void)                   /* System V version */ #TODO
#int setpgrp(pid_t pid, pid_t pgid) #TODO
[/func]

[h] sys/resource.h
[func/]
int getpriority(int which, int who)
int setpriority(int which, int who, int prio)
[/func]

[func/]
int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid)
int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid)
int getrlimit(int resource, struct rlimit *rlim);
int setrlimit(int resource, const struct rlimit *rlim)
int prlimit(pid_t pid, int resource, const struct rlimit *new_limit, struct rlimit *old_limit)
int getrusage(int who, struct rusage *usage)
pid_t getsid(pid_t pid)
int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen)
int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen)
int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen)
int gettimeofday(struct timeval *tv, struct timezone *tz)
int settimeofday(const struct timeval *tv, const struct timezone *tz)
[/func]

/* [h] sys/io.h */
/* [func/] */
/* unsigned char inb(unsigned short int port) */
/* unsigned char inb_p(unsigned short int port) */
/* unsigned short int inw(unsigned short int port) */
/* unsigned short int inw_p(unsigned short int port) */
/* unsigned int inl(unsigned short int port) */
/* unsigned int inl_p(unsigned short int port) */

/* void outb(unsigned char value, unsigned short int port) */
/* void outb_p(unsigned char value, unsigned short int port) */
/* void outw(unsigned short int value, unsigned short int port) */
/* void outw_p(unsigned short int value, unsigned short int port) */
/* void outl(unsigned int value, unsigned short int port) */
/* void outl_p(unsigned int value, unsigned short int port) */

/* void insb(unsigned short int port, void *addr, unsigned long int count) */
/* void insw(unsigned short int port, void *addr, unsigned long int count) */
/* void insl(unsigned short int port, void *addr, unsigned long int count) */
/* void outsb(unsigned short int port, const void *addr, unsigned long int count) */
/* void outsw(unsigned short int port, const void *addr, unsigned long int count) */
/* void outsl(unsigned short int port, const void *addr, unsigned long int count) */
/* [/func] */

[h] sys/inotify.h
[func/]
int inotify_add_watch(int fd, const char *pathname, uint32_t mask)
int inotify_init(void)
int inotify_init1(int flags)
int inotify_rm_watch(int fd, int wd)
[/func]

[h] sys/ioctl.h
#[func/]
#int ioctl(int d, unsigned long request, ...) #TODO
#[/func]
